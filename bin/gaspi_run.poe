#!/bin/sh

# Copyright (c) Fraunhofer ITWM - Carsten Lojewski <lojewski@itwm.fhg.de>, 2013-2021

# This file is part of GPI-2.

# GPI-2 is free software; you can redistribute it
# and/or modify it under the terms of the GNU General Public License
# version 3 as published by the Free Software Foundation.

# GPI-2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with GPI-2. If not, see <http://www.gnu.org/licenses/>.

SET_NUMA=0
PRG=""
PRG_ARGS=""
TYPE=GASPI_MASTER
MAX_NUMA_NODES=1
HAS_NUMA=0
HN=$(hostname)
GASPI_LAUNCHER=poe
VALIDATE_MACHINEFILE=0

#helper functions
usage()
{
    echo
    echo "Usage: gaspi_run [OPTIONS] <path GASPI program>"
    echo
    echo "Available options:"
    echo "  -N               Enable NUMA for processes on same node."
    echo "  -p               Ping hosts before starting binary."
    echo "  -h               This help."
    echo
}

print_error_exit()
{
    echo
    echo "Error: $1"
    echo
    exit 1
}

validate_machinefile()
{
    if [ ! -s $MFILE ]; then
        print_error_exit "Empty machine file ($1)"
    fi

    while read LINE
    do
        i=`echo $LINE | gawk '{print $1}'   `
        if [ -n "$i" ]; then
            ping -c 1 $i >/dev/null 2>&1 ||
            {
                print_error_exit "Host not reachable ($i)"
            }
        fi
    done < $MFILE
}

#at least we need binary
if [ $# -lt 1 ]; then
    usage
    exit 1
fi

#command line parsing
while [ -n "$1" ]; do
    case $1 in
        -m | --machinefile)
            shift
            echo "Warning: option (-m, --machinefile) not used. Using Load Leveler settings."
            ;;
        -N | --NUMA)
            SET_NUMA=1
            ;;
        -d | --debug)
            echo "Warning: option (-d, --debug) not available (using Load Leveler)."
            ;;
        -h | --help)
            usage
            ;;
        -b | --binary)
            shift
            ;;
        -n | --nodes)
            shift
            echo "Warning: option (-n, --nodes) not used. Using Load Leveler settings."
            ;;
        -p | --ping)
            VALIDATE_MACHINEFILE=1
            ;;
        *) #Sucks! we're taking a small risk here
            if [ -x $1 ]; then
                PRG=$(readlink -f $1)
                shift
                PRG_ARGS="$*"
                break
            else
                print_error_exit "Cannot execute $1 (or file does not exist)"
            fi
    esac
    shift
done

if [ -z "$PRG" ]; then
    print_error_exit "No binary file provided. See help (-h option)"
fi

#sanity check and settings
if [ $SET_NUMA -eq 1 ]; then
    which numactl > /dev/null
    if [ $? = 0 ]; then
        MAX_NUMA_NODES=`numactl --hardware|grep available|gawk '{print $2}'`
        HAS_NUMA=1
    else
        MAX_NUMA_NODES=1
        HAS_NUMA=0
    fi
else
    MAX_NUMA_NODES=256
fi

#let's rock
if [ -z $LOADL_HOSTFILE ]; then
    print_error_exit "No machine file (LOADL_HOSTFILE)"
else
    MFILE=$LOADL_HOSTFILE
    if [ $VALIDATE_MACHINEFILE -eq 1 ]; then
        validate_machinefile $MFILE
    fi
fi

export GASPI_MASTER=`head -n 1 $LOADL_HOSTFILE`
export GASPI_MFILE=$LOADL_HOSTFILE
export GASPI_SOCKET=0
if [ $SET_NUMA -eq 1 ]; then
    export GASPI_SET_NUMA_SOCKET=1
else
    export GASPI_SET_NUMA_SOCKET=0
fi

for LINE in $(tail -n +2 $GASPI_MFILE)
do
    if [ "$LINE" = "$previous" ]; then
        j=$((j+1))
        if [ $j -eq $MAX_NUMA_NODES ]; then
            print_error_exit "max procs per node: $MAX_NUMA_NODES"
        fi
    else
        j=0
    fi
    previous="$LINE"
done
exit_status=0
export GASPI_NRANKS=`wc -l $LOADL_HOSTFILE|gawk '{print $1}'`
$GASPI_LAUNCHER $PRG $PRG_ARGS
if [ $? != 0 ]; then
    exit_status=1
fi

unset GASPI_MASTER
unset GASPI_MFILE
unset GASPI_SET_NUMA_SOCKET
unset GASPI_SOCKET
unset GASPI_NRANKS

exit $exit_status
